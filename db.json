{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1555553719608},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1555553719610},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1555553719611},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1555553719617},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1555553719616},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1555553719618},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1555553719619},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1555553719620},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1555553719623},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1555553719621},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1555553719624},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1555553719625},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1555553719627},{"_id":"themes/next/_config.yml","hash":"4255865b135593627b158031af43cbcc0dc56918","modified":1555556350356},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1555553719628},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1555553719727},{"_id":"source/_posts/Netty之ByteBuf.md","hash":"ec883e286a852d17af105760678da773bdcd6b54","modified":1555562445037},{"_id":"source/categories/index.md","hash":"2a068abd91db1b4ce98a165ad7cad5d660367e16","modified":1555556018169},{"_id":"source/tags/index.md","hash":"96e3ad294adb6b4e7a171c168eca2d45c07d410b","modified":1555555071196},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1555553719583},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1555553719567},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1555553395504},{"_id":"themes/next/.git/index","hash":"756add8d233df8af21641a1c4a176db14ee0dc50","modified":1555553720059},{"_id":"themes/next/.git/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1555553719550},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1555553719612},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1555553719613},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1555553719615},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1555553719616},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1555553719630},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1555553719631},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1555553719632},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1555553719633},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1555553719633},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1555553719635},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1555553719636},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1555553719637},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1555553719638},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1555553719639},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1555553719640},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1555553719641},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1555553719642},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1555553719643},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1555553719644},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1555553719645},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1555553719649},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1555553719720},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1555553719721},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1555553719723},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1555553719724},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1555553719725},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1555553719726},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1555553719728},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1555553719722},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1555553719730},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1555553720053},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1555553720055},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1555553720056},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555553719857},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1555553395504},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1555553395504},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1555553395504},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1555553395504},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1555553395504},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1555553395504},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1555553395504},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1555553395504},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1555553395504},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1555553395504},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1555553395504},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1555553395520},{"_id":"themes/next/.git/logs/HEAD","hash":"c701abdf1df2f67ad0c3ba86c3bb8a94604e8f90","modified":1555553719573},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1555553719647},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1555553719648},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1555553719651},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1555553719652},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1555553719653},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1555553719654},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1555553719655},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1555553719656},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1555553719658},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1555553719659},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1555553719660},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1555553719663},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1555553719664},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1555553719665},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1555553719666},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1555553719676},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1555553719677},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1555553719683},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1555553719707},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1555553719707},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1555553719708},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1555553719710},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1555553719711},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1555553719712},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1555553719709},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1555553719732},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1555553719733},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1555553719734},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1555553719734},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1555553719736},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1555553719737},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1555553719737},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1555553719738},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1555553719739},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1555553719855},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1555553719858},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555553719859},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1555553719860},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1555553719861},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1555553719862},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1555553719863},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1555553719864},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1555553719866},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1555553719866},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1555553719867},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555553719868},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555553719869},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555553719870},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1555553719871},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555553719872},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1555553719873},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1555553719874},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1555553719875},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555553719680},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555553719681},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555553719820},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555553719823},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555553719851},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555553719819},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555553719854},{"_id":"themes/next/.git/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1555553719572},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1555553719662},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1555553719663},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1555553719667},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1555553719669},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1555553719669},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1555553719671},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1555553719672},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1555553719673},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1555553719674},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1555553719678},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1555553719680},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1555553719682},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1555553719686},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1555553719687},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1555553719688},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1555553719689},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1555553719690},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1555553719690},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1555553719691},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1555553719692},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1555553719693},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1555553719694},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1555553719695},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1555553719696},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1555553719697},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1555553719698},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1555553719699},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1555553719700},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1555553719701},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1555553719702},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1555553719703},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1555553719704},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1555553719705},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1555553719706},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1555553719716},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1555553719717},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1555553719718},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1555553719720},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1555553719817},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1555553719819},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1555553719822},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1555553719821},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1555553719850},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1555553719851},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1555553719853},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1555553719854},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1555553719877},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1555553719878},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1555553719879},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1555553719880},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1555553719881},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1555553719882},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1555553719883},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1555553719884},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1555553719886},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1555553719887},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1555553719889},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1555553719905},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1555553719912},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1555553719914},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1555553719916},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1555553719917},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1555553719933},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1555553719933},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1555553719933},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1555553719933},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1555553719933},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1555553719933},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1555553719948},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1555553719948},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1555553719948},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1555553719985},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1555553719990},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1555553719991},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1555553719992},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1555553719993},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1555553719994},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1555553719995},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1555553719998},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1555553719999},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1555553720001},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1555553720003},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1555553720004},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1555553720005},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1555553720006},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1555553720007},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1555553720008},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1555553720009},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1555553720010},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1555553720012},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1555553720013},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1555553720014},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1555553720016},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1555553720017},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1555553720018},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1555553720021},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1555553720022},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1555553720023},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1555553720038},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1555553720040},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1555553720047},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1555553720049},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1555553720050},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1555553719988},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"c701abdf1df2f67ad0c3ba86c3bb8a94604e8f90","modified":1555553719575},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1555553719564},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1555553719714},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1555553719715},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1555553719743},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1555553719744},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1555553719745},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1555553719746},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1555553719747},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1555553719764},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1555553719789},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1555553719811},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1555553719812},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1555553719813},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1555553719814},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1555553719815},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1555553719816},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1555553719809},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1555553719825},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1555553719827},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1555553719828},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1555553719829},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1555553719830},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1555553719831},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1555553719831},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1555553719832},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1555553719837},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1555553719838},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1555553719839},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1555553719840},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1555553719841},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1555553719844},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1555553719845},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1555553719846},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1555553719847},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1555553719848},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1555553719848},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1555553719886},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1555553719901},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1555553719903},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1555553719919},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1555553719920},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1555553719921},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1555553719922},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1555553719923},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1555553719924},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1555553719933},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1555553719933},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1555553719933},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1555553719933},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1555553719933},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1555553719948},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1555553719948},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1555553719948},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1555553720035},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1555553720037},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1555553719898},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1555553719900},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555553719981},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555553719983},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1555553720044},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"c701abdf1df2f67ad0c3ba86c3bb8a94604e8f90","modified":1555553719564},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1555553719749},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1555553719751},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1555553719750},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1555553719752},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1555553719753},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1555553719754},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1555553719756},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1555553719757},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1555553719758},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1555553719759},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1555553719760},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1555553719761},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1555553719762},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1555553719763},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1555553719765},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1555553719766},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1555553719767},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1555553719768},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1555553719769},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1555553719770},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1555553719771},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1555553719772},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1555553719773},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1555553719774},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1555553719774},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1555553719775},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1555553719776},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1555553719777},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1555553719778},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1555553719780},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1555553719781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1555553719782},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1555553719782},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1555553719783},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1555553719784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1555553719785},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1555553719786},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1555553719787},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1555553719788},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1555553719790},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1555553719791},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1555553719792},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1555553719793},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1555553719794},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1555553719795},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1555553719796},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1555553719797},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1555553719798},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1555553719799},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1555553719800},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1555553719801},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1555553719802},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1555553719803},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1555553719804},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1555553719805},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1555553719806},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1555553719807},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1555553719808},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1555553719834},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1555553719836},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1555553719842},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1555553719893},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1555553719895},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1555553719894},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1555553719896},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1555553719897},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1555553719926},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1555553719927},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1555553719928},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1555553719930},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1555553719931},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1555553719932},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1555553719948},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1555553719964},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555553719964},{"_id":"themes/next/.git/objects/pack/pack-a22441d9cf9615334864bdd6f0dc9f36fa85a688.idx","hash":"e1a03c22c203c8bc00116c1eb37b303209841ad6","modified":1555553719398},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1555553719910},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1555553720031},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1555553719964},{"_id":"themes/next/.git/objects/pack/pack-a22441d9cf9615334864bdd6f0dc9f36fa85a688.pack","hash":"b6f7b404d7357ffea67227f3b4b61bf694599f9d","modified":1555553719398},{"_id":"public/search.xml","hash":"bab8039edb34f867875c6b921ef178b56a9e0614","modified":1555562603366},{"_id":"public/categories/index.html","hash":"4e3ca38329ba9ff2ba33f2898a972329715e5a60","modified":1555562604230},{"_id":"public/tags/index.html","hash":"410f6dfd3bc3ca9d4c9242a532fe8e5f9d0d7462","modified":1555562604230},{"_id":"public/2019/04/18/Netty之ByteBuf/index.html","hash":"1f593c2a20d20ab86526825e91d45f5cdfe0a788","modified":1555562604435},{"_id":"public/index.html","hash":"160997985a187c45962f683ee3959b13b4cefe8c","modified":1555562604437},{"_id":"public/archives/2019/index.html","hash":"b610c8b81c9a8c708eaed2bff2ffb2c3010391cc","modified":1555562604437},{"_id":"public/tags/Netty/index.html","hash":"f83cac8f12cf567e0de4d80508587378f0dda54e","modified":1555562604437},{"_id":"public/archives/2019/04/index.html","hash":"f901752051ca07b2fe05303206d78c8e80ab3dd9","modified":1555562604437},{"_id":"public/tags/Netty-in-action/index.html","hash":"e0f7e1c671c91964ab3c677db0544d24b3c708d2","modified":1555562604438},{"_id":"public/categories/网络/index.html","hash":"410b386e3c8c8bd1d87f8d912abdc14fd04ce770","modified":1555558022700},{"_id":"public/archives/index.html","hash":"7220dabd71a7344603f77dd0795368b80dd26142","modified":1555562604435},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1555558022700},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1555558022700},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1555558022700},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555558022701},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1555558022701},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1555558022701},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1555558022701},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1555558022701},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1555558022701},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1555558022701},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555558022702},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555558022702},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1555558022702},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555558022702},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1555558022702},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1555558022702},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1555558022702},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555558022703},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1555558022703},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1555558022703},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1555558023866},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1555558023878},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1555558023880},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1555558023881},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1555558023881},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1555558023881},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1555558023881},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1555558023881},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1555558023882},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1555558023882},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1555558023882},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1555558023882},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1555558023882},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1555558023891},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1555558023892},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1555558023893},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1555558023893},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1555558023893},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1555558023893},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1555558023893},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1555558023893},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1555558023894},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1555558023894},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1555558023894},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1555558023894},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1555558023894},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1555558023894},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1555558023894},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1555558023894},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1555558023895},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1555558023895},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1555558023895},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1555558023895},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1555558023895},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1555558023895},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1555558023895},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1555558023895},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1555558023895},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1555558023896},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1555558023896},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1555558023896},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1555558023896},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1555558023896},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1555558023896},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1555558023896},{"_id":"public/css/main.css","hash":"128391fb7a462a06673bbe26d2d339f15fbbcd8b","modified":1555558023896},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555558023897},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555558023897},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1555558023904},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1555558023904},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1555558023905},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1555558023905},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1555558023905},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1555558023905},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1555558023905},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1555558023906},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1555558023906},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1555558023906},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1555558023906},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1555558023906},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1555558023906},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1555558023906},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555558023906},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555558023907},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1555558023907},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1555558023907},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1555558023919},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1555558023919},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1555558023920},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1555558023924},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1555558023931},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555558023931},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1555558023933},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555558023933},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1555558023933},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1555558023933},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555558023934},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1555558023938},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555558023939},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1555558023940},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1555558023945},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1555558023948},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1555558023948},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1555558023950},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555558023954},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1555558023957},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555558023961},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1555558023974},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1555558023978},{"_id":"public/categories/java/index.html","hash":"7612eca7dfc2c9c33fb0c4ad8c4c8a260ef21da0","modified":1555562604443},{"_id":"public/categories/java/netty/index.html","hash":"de8c6590843c37421aa90909c2d33459da91ebe2","modified":1555562604443}],"Category":[{"name":"网络","_id":"cjum32yfq000370uyzlvch9wr"},{"name":"java netty","_id":"cjum5l96o0000mouygn7d6ndc"},{"name":"java","_id":"cjum5mgj50000q8uyn929dzdi"},{"name":"netty","parent":"cjum5mgj50000q8uyn929dzdi","_id":"cjum5mgjh0003q8uyq8uhgagp"}],"Data":[],"Page":[{"title":"categories","date":"2019-04-18T02:53:09.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-04-18 10:53:09\ntype: \"categories\"\n---\n","updated":"2019-04-18T02:53:38.169Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjum32ycb000070uyh6kpaz4n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-04-18T02:37:22.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-04-18 10:37:22\ntype: \"tags\"\n---\n","updated":"2019-04-18T02:37:51.196Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjum32yci000170uydp7ifry3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Netty之ByteBuf","date":"2019-04-18T03:25:27.000Z","_content":"\n## Netty之ByteBuf\n\n本文内容主要参考**Netty In Action**,偏笔记向.\n\n网络编程中,字节缓冲区是一个比较基本的组件.Java NIO提供了`ByteBuffer`,但是使用过的都知道`ByteBuffer`对于读写数据操作还是有些麻烦的,切换读写状态需要`flip()`.**Netty**框架对字节缓冲区进行了封装,名称是`ByteBuf`,相较于`ByteBuffer`更灵活.\n\n<!-- more -->\n\n### 1.ByteBuf特点概览\n\n- 用户可以自定义缓冲区类型对其扩展\n- 通过内置的符合缓冲区类型实现了透明的零拷贝\n- 容量可以按需增长(类似`StringBuilder`)\n- 切换读写模式不用调用`flip()`方法\n- 读写使用各自的索引\n- 支持方法的链式调用\n- 支持引用计数\n- 支持池化\n\n### 2.ByteBuf类介绍\n\n#### 2.1工作模式\n\n`ByteBuf`维护了两个指针,一个用于读取(`readerIndex`),一个用于写入(`writerIndex`).\n\n使用**ByteBuf的API**中的`read*`方法读取数据时,`readerIndex`会根据读取字节数向后移动,但是`get*`方法不会移动`readerIndex`;使用`write*`数据时,`writerIndex`会根据字节数移动,但是`set*`方法不会移动`writerIndex`.(`read*`表示`read`开头的方法,其余意义相同)\n\n读取数据时,如果`readerIndex`超过了`writerIndex`会触发`IndexOutOfBoundsException`.\n\n可以指定`ByteBuf`容量最大值,`capacity(int)`或`ensureWritable(int)`,当超出容量时会抛出异常.\n\n#### 2.2使用模式\n\n##### 2.2.1堆缓冲区\n\n将`ByteBuf`存入**JVM**的堆空间.能够在没有池化的情况下提供快速的分配和释放.\n\n除此之外,ByteBuf的堆缓冲区还提供了一个后备数组(backing array).后备数组和ByteBuf中的数据是对应的,如果修改了`backing array`中的数据,`ByteBuf`中的数据是同步的.\n\n```java\npublic static void main(String[] args) {\n        ByteBuf heapBuf = Unpooled.buffer(1024);\n        if(heapBuf.hasArray()){\n            heapBuf.writeBytes(\"Hello,heapBuf\".getBytes());\n            System.out.println(\"数组第一个字节在缓冲区中的偏移量:\"+heapBuf.arrayOffset());\n            System.out.println(\"缓冲区中的readerIndex:\"+heapBuf.readerIndex());\n            System.out.println(\"writerIndex:\"+heapBuf.writerIndex());\n            System.out.println(\"缓冲区中的可读字节数:\"+heapBuf.readableBytes());//等于writerIndex-readerIndex\n            byte[] array = heapBuf.array();\n            for(int i = 0;i < heapBuf.readableBytes();i++){\n                System.out.print((char) array[i]);\n                if(i==5){\n                    array[i] = (int)'.';\n                }\n            }\n            //不会修改readerIndex位置\n            System.out.println(\"\\n读取数据后的readerIndex:\"+heapBuf.readerIndex());\n            //读取缓冲区的数据,查看是否将逗号改成了句号\n            while (heapBuf.isReadable()){\n                System.out.print((char) heapBuf.readByte());\n            }\n        }\n```\n\n输出:\n\n```verilog\n数组第一个字节在缓冲区中的偏移量:0\n缓冲区中的readerIndex:0\nwriterIndex:13\n缓冲区中的可读字节数:13\nHello,heapBuf\n读取数据后的readerIndex:0\nHello.heapBuf\n```\n\n> 如果`hasArray()`返回`false`,尝试访问backing array会报错\n\n##### 2.2.2直接缓冲区\n\n直接缓冲区存储于**JVM堆外**的内存空间.这样做有一个好处,当你想把JVM中的数据写给socket,需要将数据复制到直接缓冲区(JVM堆外内存)再交给socket.如果使用直接缓冲区,将减少复制这一过程.\n\n但是直接缓冲区也是有不足的,与JVM堆的缓冲区相比,他们的分配和释放是比较昂贵的.而且还有一个缺点,面对遗留代码的时候,可能不确定ByteBuf使用的是直接缓冲区还是堆缓冲区,你可能需要进行一次额外的复制.如代码示例.\n\n与自带后备数组的堆缓冲区来讲,这要多做一些工作.所以,如果确定容器中的数据会被作为数组来访问,你可能更愿意使用堆内存.\n\n```java\n\t\t//实际上你不知道从哪获得的引用,这可能是一个直接缓冲区的ByteBuf\n\t\t//忽略Unpooled.buffer方法,当做不知道从哪获得的directBuf\n\t\tByteBuf directBuf = Unpooled.buffer(1024); \n\t\t//如果想要从数组中访问数据,需要将直接缓冲区中的数据手动复制到数组中\n        if (!directBuf.hasArray()) {\n            int length = directBuf.readableBytes();\n            byte[] array = new byte[length];\n            directBuf.getBytes(directBuf.readerIndex(), array);\n            handleArray(array, 0, length);\n        }\n```\n\n##### 2.2.3符合缓冲区(CompositeByteBuf)\n\n聚合缓冲区是个非常好用的东西,是多个ByteBuf的聚合视图,可以添加或删除ByteBuf实例.\n\n> CompositeByteBuf中的ByteBuf实例可能同事包含直接内存分配和非直接内存分配.如果其中只有一个实例,那么调用CompositeByteBuf中的`hasArray()`方法将返回该组件上的`hasArray()`方法的值,否则返回`false`\n\n多个ByteBuf组成一个完整的消息是很常见的,比如`header`和`body`组成的HTTP协议传输的消息.消息中的`body`有时候可能能重用,我们不想每次都创建重复的`body`,我们可以通过CompositeByteBuf来复用`body`.\n\n对比一下JDK中的`ByteBuffer`实现复合缓冲区和Netty中的`CompositeByteBuf`.\n\n```java\n//JDK版本实现复合缓冲区\npublic static void byteBufferComposite(ByteBuffer header, ByteBuffer body) {\n        //使用一个数组来保存消息的各个部分\n        ByteBuffer[] message =  new ByteBuffer[]{ header, body };\n\n        // 创建一个新的ByteBuffer来复制合并header和body\n        ByteBuffer message2 =\n                ByteBuffer.allocate(header.remaining() + body.remaining());\n        message2.put(header);\n        message2.put(body);\n        message2.flip();\n    }\n\n//Netty中的CompositeByteBuf\n public static void byteBufComposite() {\n        CompositeByteBuf messageBuf = Unpooled.compositeBuffer();\n        ByteBuf headerBuf = Unpooled.buffer(1024); // 可能是直接缓存也可能是堆缓存中的\n        ByteBuf bodyBuf = Unpooled.buffer(1024);   // 可能是直接缓存也可能是堆缓存中的\n        messageBuf.addComponents(headerBuf, bodyBuf);\n        //...\n        messageBuf.removeComponent(0); // remove the header\n        for (ByteBuf buf : messageBuf) {\n            System.out.println(buf.toString());\n        }\n    }\n```\n\n\n\n`CompositeByteBuf`不支持访问其后备数组,所以访问`CompositeByteBuf`中的数据类似于访问直接缓冲区\n\n```java\nCompositeByteBuf compBuf = Unpooled.compositeBuffer();\nint length = compBuf.readableBytes();\nbyte[] array = new byte[length];\n//将CompositeByteBuf中的数据复制到数组中\ncompBuf.getBytes(compBuf.readerIndex(), array);\n//处理一下数组中的数据\nhandleArray(array, 0, array.length);\n```\n\nNetty使用`CompositeByteBuf`来优化socket的IO操作,避免了JDK缓冲区实现所导致的性能和内存使用率的缺陷.内存使用率的缺陷是指对可复用对象大量的复制,Netty对其在内部做了优化,虽然没有暴露出来,但是应该知道CompositeByteBuf的优势和JDK自带工具的弊端.\n\n> JDK的NIO包中提供了Scatter/Gather I/O技术,字面意思是打散和聚合,可以理解为把单个ByteBuffer切分成多个或者把多个ByteBuffer合并成一个.\n\n### 3.字节级操作\n\nByteBuf的索引从0开始,最后一个索引是`capacity()-1`.\n\n遍历演示\n\n```java\nByteBuf buffer = Unpooled.buffer(1024); \nfor (int i = 0; i < buffer.capacity(); i++) {\n    byte b = buffer.getByte(i);//这种方法不会移动readerIndex指针\n    System.out.println((char) b);\n}\n```\n\n#### 3.1readerIndex和writerIndex\n\nJDK中的`ByteBuffer`只有一个索引,需要通过`flip()`来切换读写操作,Netty中的`ByteBuf`既有读索引,也有写索引,通过两个索引把ByteBuf划分了三部分.\n\n![](https://note.youdao.com/yws/api/personal/file/F82D62BF4B9E4AD8BCF6F9F9B63D29E1?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n可以调用`discardReadBytes() `方法可丢弃可丢弃字节并回收空间.\n\n调用`discardReadBytes() `方法之后\n\n![](https://note.youdao.com/yws/api/personal/file/E6A068B1C5CB4A949911943A989D9892?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n使用`read*`或`skip*`方法都会增加`readerIndex`.\n\n移动`readerIndex`读取可读数据的方式\n\n```java\nByteBuf buffer = ...;\nwhile (buffer.isReadable()) {\n    System.out.println(buffer.readByte());\n}\n```\n\n`write*`方法写入`ByteBuf`时会增加writerIndex,如果超过容量会抛出`IndexOutOfBoundException `.\n\n`writeableBytes()`可以返回可写字节数.\n\n```java\nByteBuf buffer = ...;\nwhile (buffer.writableBytes() >= 4) {\n\tbuffer.writeInt(random.nextInt());\n}\n```\n\n#### 3.2索引管理\n\n> JDK 的` InputStream` 定义了 `mark(int readlimit)`和`reset()`方法，这些方法分别被用来将流中的当前位置标记为指定的值，以及将流重置到该位置。\n> 同样，可以通过调用 `markReaderIndex()`、` markWriterIndex()`、 `resetWriterIndex()`和` resetReaderIndex()`来标记和重置 `ByteBuf `的` readerIndex `和 `writerIndex`。这些和`InputStream `上的调用类似，只是没有` readlimit` 参数来指定标记什么时候失效。 \n\n如果将索引设置到一个无效位置会抛出`IndexOutOfBoundsException`.\n\n可以通过`clear()`归零索引,归零索引不会清除数据.\n\n#### 3.3查找\n\nByteBuf中很多方法可以确定**值**的索引,如`indexOf()`.\n\n复杂查找可以通过那些需要一个`ByteBufProcessor`作为参数的方法完成.这个接口应该可以使用`lambda`表达式(但是我现在使用的Netty4.1.12已经废弃了该接口,应该使用`ByteProcessor`).\n\n```java\nByteBuf buffer = ...;\nint index = buffer.forEachByte(ByteProcessor.FIND_CR);\n```\n\n#### 3.4派生缓冲区\n\n派生缓冲区就是,基于原缓冲区一顿操作生成新缓冲区.比如复制,切分等等.\n\n`duplicate()`；`slice()`； `slice(int, int) `;`Unpooled.unmodifiableBuffer(…) `;`order(ByteOrder)`； `readSlice(int) `.\n\n> 每个这些方法都将返回一个新的 ByteBuf 实例，它具有自己的读索引、写索引和标记\n> 索引。 其内部存储和 JDK 的 ByteBuffer 一样也是共享的。这使得派生缓冲区的创建成本\n> 是很低廉的，但是这也意味着，如果你修改了它的内容，也同时修改了其对应的源实例，所\n> 以要小心 \n\n```java\n//复制\npublic static void byteBufCopy() {\n        Charset utf8 = Charset.forName(\"UTF-8\");\n        ByteBuf buf = Unpooled.copiedBuffer(\"Netty in Action rocks!\", utf8);\n        ByteBuf copy = buf.copy(0, 15);\n        System.out.println(copy.toString(utf8));\n        buf.setByte(0, (byte)'J');\n        assert buf.getByte(0) != copy.getByte(0);\n    }\n//切片\n public static void byteBufSlice() {\n        Charset utf8 = Charset.forName(\"UTF-8\");\n        ByteBuf buf = Unpooled.copiedBuffer(\"Netty in Action rocks!\", utf8);\n        ByteBuf sliced = buf.slice(0, 15);\n        System.out.println(sliced.toString(utf8));\n        buf.setByte(0, (byte)'J');\n        assert buf.getByte(0) == sliced.getByte(0);\n    }\n```\n\n还有一些读写操作的API,留在文末展示吧.\n\n### 4.ByteBufHolder接口\n\n> 我们经常发现， 除了实际的数据负载之外， 我们还需要存储各种属性值。 HTTP 响应便是一个很好的例子， 除了表示为字节的内容，还包括状态码、 cookie 等。\n> 为了处理这种常见的用例， Netty 提供了 ByteBufHolder。 ByteBufHolder 也为 Netty 的高级特性提供了支持，如缓冲区池化，其中可以从池中借用 ByteBuf， 并且在需要时自动释放。ByteBufHolder 只有几种用于访问底层数据和引用计数的方法。 \n\n![](https://note.youdao.com/yws/api/personal/file/B261AE020F7B48D386C6E6F20E33AD75?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n### 5.ByteBuf的分配\n\n我们可以通过`ByteBufAllocator`来分配一个`ByteBuf`实例.`ByteBufAllocator`接口实现了ByteBuf的池化.\n\n可以通过 `Channel`（每个都可以有一个不同的 `ByteBufAllocator `实例）或者绑定到`ChannelHandler` 的 `ChannelHandlerContext `获取一个到` ByteBufAllocator `的引用。 \n\n```java\n//从Channel获取一个ByteBufAllocator的引用\nChannel channel = ...;\nByteBufAllocator allocator = channel.alloc();\n....\n//从ChannelHandlerContext获取ByteBufAllocator 的引用\nChannelHandlerContext ctx = ...;\nByteBufAllocator allocator2 = ctx.alloc();\n```\n\n> Netty提供了两种ByteBufAllocator的实现： PooledByteBufAllocator和Unpooled\u0002ByteBufAllocator。前者池化了ByteBuf的实例以提高性能并最大限度地减少内存碎片。 后者的实现不 池化ByteBuf实例， 并且在每次它被调用时都会返回一个新的实例。 \n\n默认使用的是`PooledByteBufAllocator `,可以通过`ChannelConfig`修改.\n\n**Unpooled缓冲区**\n\n可能有时候拿不到`ByteBufAllocator`引用的话,可以使用Unpooled工具类来创建未持化`ByteBuf`实例.\n\n**ByteBufUtil类**\n\n> ByteBufUtil 提供了用于操作 ByteBuf 的静态的辅助方法。因为这个 API 是通用的， 并且和池化无关，所以这些方法已然在分配类的外部实现。\n> 这些静态方法中最有价值的可能就是 hexdump()方法， 它以十六进制的表示形式打印ByteBuf 的内容。这在各种情况下都很有用，例如， 出于调试的目的记录 ByteBuf 的内容。十六进制的表示通常会提供一个比字节值的直接表示形式更加有用的日志条目，此外，十六进制的版本还可以很容易地转换回实际的字节表示。\n> 另一个有用的方法是 boolean equals(ByteBuf, ByteBuf)， 它被用来判断两个 ByteBuf实例的相等性。如果你实现自己的 ByteBuf 子类，你可能会发现 ByteBufUtil 的其他有用方法。 \n\n#### 6.引用计数\n\n> 引用计数是一种通过在某个对象所持有的资源不再被其他对象引用时释放该对象所持有的资源来优化内存使用和性能的技术。 它们都实现了 interface ReferenceCounted。 引用计数背后的想法并不是特别的复杂；它主要涉及跟踪到某个特定对象的活动引用的数量。一个 ReferenceCounted 实现的实例将通常以活动的引用计数为 1 作为开始。只要引用计数大于 0， 就能保证对象不会被释放。当活动引用的数量减少到 0 时，该实例就会被释放。注意，虽然释放的确切语义可能是特定于实现的，但是至少已经释放的对象应该不可再用了。 \n\n```java\n//从Channel获取ByteBufAllocator\nChannel channel = ...;\nByteBufAllocator allocator = channel.alloc();\n....\n//从ByteBufAllocator分配一个ByteBuf\nByteBuf buffer = allocator.directBuffer();\nassert buffer.refCnt() == 1;//引用计数是否为1\n\n```\n\n\n\n### 7.API\n\n#### ByteBuf\n\n![](https://note.youdao.com/yws/api/personal/file/CF647FAEE0C642CABCFC1329454F9A3C?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n![](https://note.youdao.com/yws/api/personal/file/FD2B630F7AFF4B8C85E86467EFE53765?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n![](https://note.youdao.com/yws/api/personal/file/64A587980C8748B5AFA674BCF223D953?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n![](https://note.youdao.com/yws/api/personal/file/44DF026ABA3545C5AC63D096043BF880?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n![](https://note.youdao.com/yws/api/personal/file/7762FDB1C0854B519C65B6DD9C1B53E7?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n#### ByteBufAllocator\n\n![](https://note.youdao.com/yws/api/personal/file/758F1B1A5A6F4D238012C7F79A0B7BC6?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n\n\n#### Unpooled\n\n![](https://note.youdao.com/yws/api/personal/file/F05DD429F5E144C5B3175CF96E572539?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n","source":"_posts/Netty之ByteBuf.md","raw":"---\ntitle: Netty之ByteBuf\ndate: 2019-04-18 11:25:27\ntags: [Netty,Netty in action]\ncategories: \n- java\n- netty\n---\n\n## Netty之ByteBuf\n\n本文内容主要参考**Netty In Action**,偏笔记向.\n\n网络编程中,字节缓冲区是一个比较基本的组件.Java NIO提供了`ByteBuffer`,但是使用过的都知道`ByteBuffer`对于读写数据操作还是有些麻烦的,切换读写状态需要`flip()`.**Netty**框架对字节缓冲区进行了封装,名称是`ByteBuf`,相较于`ByteBuffer`更灵活.\n\n<!-- more -->\n\n### 1.ByteBuf特点概览\n\n- 用户可以自定义缓冲区类型对其扩展\n- 通过内置的符合缓冲区类型实现了透明的零拷贝\n- 容量可以按需增长(类似`StringBuilder`)\n- 切换读写模式不用调用`flip()`方法\n- 读写使用各自的索引\n- 支持方法的链式调用\n- 支持引用计数\n- 支持池化\n\n### 2.ByteBuf类介绍\n\n#### 2.1工作模式\n\n`ByteBuf`维护了两个指针,一个用于读取(`readerIndex`),一个用于写入(`writerIndex`).\n\n使用**ByteBuf的API**中的`read*`方法读取数据时,`readerIndex`会根据读取字节数向后移动,但是`get*`方法不会移动`readerIndex`;使用`write*`数据时,`writerIndex`会根据字节数移动,但是`set*`方法不会移动`writerIndex`.(`read*`表示`read`开头的方法,其余意义相同)\n\n读取数据时,如果`readerIndex`超过了`writerIndex`会触发`IndexOutOfBoundsException`.\n\n可以指定`ByteBuf`容量最大值,`capacity(int)`或`ensureWritable(int)`,当超出容量时会抛出异常.\n\n#### 2.2使用模式\n\n##### 2.2.1堆缓冲区\n\n将`ByteBuf`存入**JVM**的堆空间.能够在没有池化的情况下提供快速的分配和释放.\n\n除此之外,ByteBuf的堆缓冲区还提供了一个后备数组(backing array).后备数组和ByteBuf中的数据是对应的,如果修改了`backing array`中的数据,`ByteBuf`中的数据是同步的.\n\n```java\npublic static void main(String[] args) {\n        ByteBuf heapBuf = Unpooled.buffer(1024);\n        if(heapBuf.hasArray()){\n            heapBuf.writeBytes(\"Hello,heapBuf\".getBytes());\n            System.out.println(\"数组第一个字节在缓冲区中的偏移量:\"+heapBuf.arrayOffset());\n            System.out.println(\"缓冲区中的readerIndex:\"+heapBuf.readerIndex());\n            System.out.println(\"writerIndex:\"+heapBuf.writerIndex());\n            System.out.println(\"缓冲区中的可读字节数:\"+heapBuf.readableBytes());//等于writerIndex-readerIndex\n            byte[] array = heapBuf.array();\n            for(int i = 0;i < heapBuf.readableBytes();i++){\n                System.out.print((char) array[i]);\n                if(i==5){\n                    array[i] = (int)'.';\n                }\n            }\n            //不会修改readerIndex位置\n            System.out.println(\"\\n读取数据后的readerIndex:\"+heapBuf.readerIndex());\n            //读取缓冲区的数据,查看是否将逗号改成了句号\n            while (heapBuf.isReadable()){\n                System.out.print((char) heapBuf.readByte());\n            }\n        }\n```\n\n输出:\n\n```verilog\n数组第一个字节在缓冲区中的偏移量:0\n缓冲区中的readerIndex:0\nwriterIndex:13\n缓冲区中的可读字节数:13\nHello,heapBuf\n读取数据后的readerIndex:0\nHello.heapBuf\n```\n\n> 如果`hasArray()`返回`false`,尝试访问backing array会报错\n\n##### 2.2.2直接缓冲区\n\n直接缓冲区存储于**JVM堆外**的内存空间.这样做有一个好处,当你想把JVM中的数据写给socket,需要将数据复制到直接缓冲区(JVM堆外内存)再交给socket.如果使用直接缓冲区,将减少复制这一过程.\n\n但是直接缓冲区也是有不足的,与JVM堆的缓冲区相比,他们的分配和释放是比较昂贵的.而且还有一个缺点,面对遗留代码的时候,可能不确定ByteBuf使用的是直接缓冲区还是堆缓冲区,你可能需要进行一次额外的复制.如代码示例.\n\n与自带后备数组的堆缓冲区来讲,这要多做一些工作.所以,如果确定容器中的数据会被作为数组来访问,你可能更愿意使用堆内存.\n\n```java\n\t\t//实际上你不知道从哪获得的引用,这可能是一个直接缓冲区的ByteBuf\n\t\t//忽略Unpooled.buffer方法,当做不知道从哪获得的directBuf\n\t\tByteBuf directBuf = Unpooled.buffer(1024); \n\t\t//如果想要从数组中访问数据,需要将直接缓冲区中的数据手动复制到数组中\n        if (!directBuf.hasArray()) {\n            int length = directBuf.readableBytes();\n            byte[] array = new byte[length];\n            directBuf.getBytes(directBuf.readerIndex(), array);\n            handleArray(array, 0, length);\n        }\n```\n\n##### 2.2.3符合缓冲区(CompositeByteBuf)\n\n聚合缓冲区是个非常好用的东西,是多个ByteBuf的聚合视图,可以添加或删除ByteBuf实例.\n\n> CompositeByteBuf中的ByteBuf实例可能同事包含直接内存分配和非直接内存分配.如果其中只有一个实例,那么调用CompositeByteBuf中的`hasArray()`方法将返回该组件上的`hasArray()`方法的值,否则返回`false`\n\n多个ByteBuf组成一个完整的消息是很常见的,比如`header`和`body`组成的HTTP协议传输的消息.消息中的`body`有时候可能能重用,我们不想每次都创建重复的`body`,我们可以通过CompositeByteBuf来复用`body`.\n\n对比一下JDK中的`ByteBuffer`实现复合缓冲区和Netty中的`CompositeByteBuf`.\n\n```java\n//JDK版本实现复合缓冲区\npublic static void byteBufferComposite(ByteBuffer header, ByteBuffer body) {\n        //使用一个数组来保存消息的各个部分\n        ByteBuffer[] message =  new ByteBuffer[]{ header, body };\n\n        // 创建一个新的ByteBuffer来复制合并header和body\n        ByteBuffer message2 =\n                ByteBuffer.allocate(header.remaining() + body.remaining());\n        message2.put(header);\n        message2.put(body);\n        message2.flip();\n    }\n\n//Netty中的CompositeByteBuf\n public static void byteBufComposite() {\n        CompositeByteBuf messageBuf = Unpooled.compositeBuffer();\n        ByteBuf headerBuf = Unpooled.buffer(1024); // 可能是直接缓存也可能是堆缓存中的\n        ByteBuf bodyBuf = Unpooled.buffer(1024);   // 可能是直接缓存也可能是堆缓存中的\n        messageBuf.addComponents(headerBuf, bodyBuf);\n        //...\n        messageBuf.removeComponent(0); // remove the header\n        for (ByteBuf buf : messageBuf) {\n            System.out.println(buf.toString());\n        }\n    }\n```\n\n\n\n`CompositeByteBuf`不支持访问其后备数组,所以访问`CompositeByteBuf`中的数据类似于访问直接缓冲区\n\n```java\nCompositeByteBuf compBuf = Unpooled.compositeBuffer();\nint length = compBuf.readableBytes();\nbyte[] array = new byte[length];\n//将CompositeByteBuf中的数据复制到数组中\ncompBuf.getBytes(compBuf.readerIndex(), array);\n//处理一下数组中的数据\nhandleArray(array, 0, array.length);\n```\n\nNetty使用`CompositeByteBuf`来优化socket的IO操作,避免了JDK缓冲区实现所导致的性能和内存使用率的缺陷.内存使用率的缺陷是指对可复用对象大量的复制,Netty对其在内部做了优化,虽然没有暴露出来,但是应该知道CompositeByteBuf的优势和JDK自带工具的弊端.\n\n> JDK的NIO包中提供了Scatter/Gather I/O技术,字面意思是打散和聚合,可以理解为把单个ByteBuffer切分成多个或者把多个ByteBuffer合并成一个.\n\n### 3.字节级操作\n\nByteBuf的索引从0开始,最后一个索引是`capacity()-1`.\n\n遍历演示\n\n```java\nByteBuf buffer = Unpooled.buffer(1024); \nfor (int i = 0; i < buffer.capacity(); i++) {\n    byte b = buffer.getByte(i);//这种方法不会移动readerIndex指针\n    System.out.println((char) b);\n}\n```\n\n#### 3.1readerIndex和writerIndex\n\nJDK中的`ByteBuffer`只有一个索引,需要通过`flip()`来切换读写操作,Netty中的`ByteBuf`既有读索引,也有写索引,通过两个索引把ByteBuf划分了三部分.\n\n![](https://note.youdao.com/yws/api/personal/file/F82D62BF4B9E4AD8BCF6F9F9B63D29E1?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n可以调用`discardReadBytes() `方法可丢弃可丢弃字节并回收空间.\n\n调用`discardReadBytes() `方法之后\n\n![](https://note.youdao.com/yws/api/personal/file/E6A068B1C5CB4A949911943A989D9892?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n使用`read*`或`skip*`方法都会增加`readerIndex`.\n\n移动`readerIndex`读取可读数据的方式\n\n```java\nByteBuf buffer = ...;\nwhile (buffer.isReadable()) {\n    System.out.println(buffer.readByte());\n}\n```\n\n`write*`方法写入`ByteBuf`时会增加writerIndex,如果超过容量会抛出`IndexOutOfBoundException `.\n\n`writeableBytes()`可以返回可写字节数.\n\n```java\nByteBuf buffer = ...;\nwhile (buffer.writableBytes() >= 4) {\n\tbuffer.writeInt(random.nextInt());\n}\n```\n\n#### 3.2索引管理\n\n> JDK 的` InputStream` 定义了 `mark(int readlimit)`和`reset()`方法，这些方法分别被用来将流中的当前位置标记为指定的值，以及将流重置到该位置。\n> 同样，可以通过调用 `markReaderIndex()`、` markWriterIndex()`、 `resetWriterIndex()`和` resetReaderIndex()`来标记和重置 `ByteBuf `的` readerIndex `和 `writerIndex`。这些和`InputStream `上的调用类似，只是没有` readlimit` 参数来指定标记什么时候失效。 \n\n如果将索引设置到一个无效位置会抛出`IndexOutOfBoundsException`.\n\n可以通过`clear()`归零索引,归零索引不会清除数据.\n\n#### 3.3查找\n\nByteBuf中很多方法可以确定**值**的索引,如`indexOf()`.\n\n复杂查找可以通过那些需要一个`ByteBufProcessor`作为参数的方法完成.这个接口应该可以使用`lambda`表达式(但是我现在使用的Netty4.1.12已经废弃了该接口,应该使用`ByteProcessor`).\n\n```java\nByteBuf buffer = ...;\nint index = buffer.forEachByte(ByteProcessor.FIND_CR);\n```\n\n#### 3.4派生缓冲区\n\n派生缓冲区就是,基于原缓冲区一顿操作生成新缓冲区.比如复制,切分等等.\n\n`duplicate()`；`slice()`； `slice(int, int) `;`Unpooled.unmodifiableBuffer(…) `;`order(ByteOrder)`； `readSlice(int) `.\n\n> 每个这些方法都将返回一个新的 ByteBuf 实例，它具有自己的读索引、写索引和标记\n> 索引。 其内部存储和 JDK 的 ByteBuffer 一样也是共享的。这使得派生缓冲区的创建成本\n> 是很低廉的，但是这也意味着，如果你修改了它的内容，也同时修改了其对应的源实例，所\n> 以要小心 \n\n```java\n//复制\npublic static void byteBufCopy() {\n        Charset utf8 = Charset.forName(\"UTF-8\");\n        ByteBuf buf = Unpooled.copiedBuffer(\"Netty in Action rocks!\", utf8);\n        ByteBuf copy = buf.copy(0, 15);\n        System.out.println(copy.toString(utf8));\n        buf.setByte(0, (byte)'J');\n        assert buf.getByte(0) != copy.getByte(0);\n    }\n//切片\n public static void byteBufSlice() {\n        Charset utf8 = Charset.forName(\"UTF-8\");\n        ByteBuf buf = Unpooled.copiedBuffer(\"Netty in Action rocks!\", utf8);\n        ByteBuf sliced = buf.slice(0, 15);\n        System.out.println(sliced.toString(utf8));\n        buf.setByte(0, (byte)'J');\n        assert buf.getByte(0) == sliced.getByte(0);\n    }\n```\n\n还有一些读写操作的API,留在文末展示吧.\n\n### 4.ByteBufHolder接口\n\n> 我们经常发现， 除了实际的数据负载之外， 我们还需要存储各种属性值。 HTTP 响应便是一个很好的例子， 除了表示为字节的内容，还包括状态码、 cookie 等。\n> 为了处理这种常见的用例， Netty 提供了 ByteBufHolder。 ByteBufHolder 也为 Netty 的高级特性提供了支持，如缓冲区池化，其中可以从池中借用 ByteBuf， 并且在需要时自动释放。ByteBufHolder 只有几种用于访问底层数据和引用计数的方法。 \n\n![](https://note.youdao.com/yws/api/personal/file/B261AE020F7B48D386C6E6F20E33AD75?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n### 5.ByteBuf的分配\n\n我们可以通过`ByteBufAllocator`来分配一个`ByteBuf`实例.`ByteBufAllocator`接口实现了ByteBuf的池化.\n\n可以通过 `Channel`（每个都可以有一个不同的 `ByteBufAllocator `实例）或者绑定到`ChannelHandler` 的 `ChannelHandlerContext `获取一个到` ByteBufAllocator `的引用。 \n\n```java\n//从Channel获取一个ByteBufAllocator的引用\nChannel channel = ...;\nByteBufAllocator allocator = channel.alloc();\n....\n//从ChannelHandlerContext获取ByteBufAllocator 的引用\nChannelHandlerContext ctx = ...;\nByteBufAllocator allocator2 = ctx.alloc();\n```\n\n> Netty提供了两种ByteBufAllocator的实现： PooledByteBufAllocator和Unpooled\u0002ByteBufAllocator。前者池化了ByteBuf的实例以提高性能并最大限度地减少内存碎片。 后者的实现不 池化ByteBuf实例， 并且在每次它被调用时都会返回一个新的实例。 \n\n默认使用的是`PooledByteBufAllocator `,可以通过`ChannelConfig`修改.\n\n**Unpooled缓冲区**\n\n可能有时候拿不到`ByteBufAllocator`引用的话,可以使用Unpooled工具类来创建未持化`ByteBuf`实例.\n\n**ByteBufUtil类**\n\n> ByteBufUtil 提供了用于操作 ByteBuf 的静态的辅助方法。因为这个 API 是通用的， 并且和池化无关，所以这些方法已然在分配类的外部实现。\n> 这些静态方法中最有价值的可能就是 hexdump()方法， 它以十六进制的表示形式打印ByteBuf 的内容。这在各种情况下都很有用，例如， 出于调试的目的记录 ByteBuf 的内容。十六进制的表示通常会提供一个比字节值的直接表示形式更加有用的日志条目，此外，十六进制的版本还可以很容易地转换回实际的字节表示。\n> 另一个有用的方法是 boolean equals(ByteBuf, ByteBuf)， 它被用来判断两个 ByteBuf实例的相等性。如果你实现自己的 ByteBuf 子类，你可能会发现 ByteBufUtil 的其他有用方法。 \n\n#### 6.引用计数\n\n> 引用计数是一种通过在某个对象所持有的资源不再被其他对象引用时释放该对象所持有的资源来优化内存使用和性能的技术。 它们都实现了 interface ReferenceCounted。 引用计数背后的想法并不是特别的复杂；它主要涉及跟踪到某个特定对象的活动引用的数量。一个 ReferenceCounted 实现的实例将通常以活动的引用计数为 1 作为开始。只要引用计数大于 0， 就能保证对象不会被释放。当活动引用的数量减少到 0 时，该实例就会被释放。注意，虽然释放的确切语义可能是特定于实现的，但是至少已经释放的对象应该不可再用了。 \n\n```java\n//从Channel获取ByteBufAllocator\nChannel channel = ...;\nByteBufAllocator allocator = channel.alloc();\n....\n//从ByteBufAllocator分配一个ByteBuf\nByteBuf buffer = allocator.directBuffer();\nassert buffer.refCnt() == 1;//引用计数是否为1\n\n```\n\n\n\n### 7.API\n\n#### ByteBuf\n\n![](https://note.youdao.com/yws/api/personal/file/CF647FAEE0C642CABCFC1329454F9A3C?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n![](https://note.youdao.com/yws/api/personal/file/FD2B630F7AFF4B8C85E86467EFE53765?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n![](https://note.youdao.com/yws/api/personal/file/64A587980C8748B5AFA674BCF223D953?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n![](https://note.youdao.com/yws/api/personal/file/44DF026ABA3545C5AC63D096043BF880?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n![](https://note.youdao.com/yws/api/personal/file/7762FDB1C0854B519C65B6DD9C1B53E7?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n#### ByteBufAllocator\n\n![](https://note.youdao.com/yws/api/personal/file/758F1B1A5A6F4D238012C7F79A0B7BC6?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n\n\n#### Unpooled\n\n![](https://note.youdao.com/yws/api/personal/file/F05DD429F5E144C5B3175CF96E572539?method=download&shareKey=952006455eadac7758f7ae04b1d59c7f)\n\n","slug":"Netty之ByteBuf","published":1,"updated":"2019-04-18T04:40:45.037Z","_id":"cjum32yfb000270uy671lvwej","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Netty之ByteBuf\"><a href=\"#Netty之ByteBuf\" class=\"headerlink\" title=\"Netty之ByteBuf\"></a>Netty之ByteBuf</h2><p>本文内容主要参考<strong>Netty In Action</strong>,偏笔记向.</p>\n<p>网络编程中,字节缓冲区是一个比较基本的组件.Java NIO提供了<code>ByteBuffer</code>,但是使用过的都知道<code>ByteBuffer</code>对于读写数据操作还是有些麻烦的,切换读写状态需要<code>flip()</code>.<strong>Netty</strong>框架对字节缓冲区进行了封装,名称是<code>ByteBuf</code>,相较于<code>ByteBuffer</code>更灵活.</p>\n<a id=\"more\"></a>\n<h3 id=\"1-ByteBuf特点概览\"><a href=\"#1-ByteBuf特点概览\" class=\"headerlink\" title=\"1.ByteBuf特点概览\"></a>1.ByteBuf特点概览</h3><ul>\n<li>用户可以自定义缓冲区类型对其扩展</li>\n<li>通过内置的符合缓冲区类型实现了透明的零拷贝</li>\n<li>容量可以按需增长(类似<code>StringBuilder</code>)</li>\n<li>切换读写模式不用调用<code>flip()</code>方法</li>\n<li>读写使用各自的索引</li>\n<li>支持方法的链式调用</li>\n<li>支持引用计数</li>\n<li>支持池化</li>\n</ul>\n<h3 id=\"2-ByteBuf类介绍\"><a href=\"#2-ByteBuf类介绍\" class=\"headerlink\" title=\"2.ByteBuf类介绍\"></a>2.ByteBuf类介绍</h3><h4 id=\"2-1工作模式\"><a href=\"#2-1工作模式\" class=\"headerlink\" title=\"2.1工作模式\"></a>2.1工作模式</h4><p><code>ByteBuf</code>维护了两个指针,一个用于读取(<code>readerIndex</code>),一个用于写入(<code>writerIndex</code>).</p>\n<p>使用<strong>ByteBuf的API</strong>中的<code>read*</code>方法读取数据时,<code>readerIndex</code>会根据读取字节数向后移动,但是<code>get*</code>方法不会移动<code>readerIndex</code>;使用<code>write*</code>数据时,<code>writerIndex</code>会根据字节数移动,但是<code>set*</code>方法不会移动<code>writerIndex</code>.(<code>read*</code>表示<code>read</code>开头的方法,其余意义相同)</p>\n<p>读取数据时,如果<code>readerIndex</code>超过了<code>writerIndex</code>会触发<code>IndexOutOfBoundsException</code>.</p>\n<p>可以指定<code>ByteBuf</code>容量最大值,<code>capacity(int)</code>或<code>ensureWritable(int)</code>,当超出容量时会抛出异常.</p>\n<h4 id=\"2-2使用模式\"><a href=\"#2-2使用模式\" class=\"headerlink\" title=\"2.2使用模式\"></a>2.2使用模式</h4><h5 id=\"2-2-1堆缓冲区\"><a href=\"#2-2-1堆缓冲区\" class=\"headerlink\" title=\"2.2.1堆缓冲区\"></a>2.2.1堆缓冲区</h5><p>将<code>ByteBuf</code>存入<strong>JVM</strong>的堆空间.能够在没有池化的情况下提供快速的分配和释放.</p>\n<p>除此之外,ByteBuf的堆缓冲区还提供了一个后备数组(backing array).后备数组和ByteBuf中的数据是对应的,如果修改了<code>backing array</code>中的数据,<code>ByteBuf</code>中的数据是同步的.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ByteBuf heapBuf = Unpooled.buffer(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(heapBuf.hasArray())&#123;</span><br><span class=\"line\">            heapBuf.writeBytes(<span class=\"string\">\"Hello,heapBuf\"</span>.getBytes());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"数组第一个字节在缓冲区中的偏移量:\"</span>+heapBuf.arrayOffset());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"缓冲区中的readerIndex:\"</span>+heapBuf.readerIndex());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"writerIndex:\"</span>+heapBuf.writerIndex());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"缓冲区中的可读字节数:\"</span>+heapBuf.readableBytes());<span class=\"comment\">//等于writerIndex-readerIndex</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] array = heapBuf.array();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; heapBuf.readableBytes();i++)&#123;</span><br><span class=\"line\">                System.out.print((<span class=\"keyword\">char</span>) array[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">                    array[i] = (<span class=\"keyword\">int</span>)<span class=\"string\">'.'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//不会修改readerIndex位置</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"\\n读取数据后的readerIndex:\"</span>+heapBuf.readerIndex());</span><br><span class=\"line\">            <span class=\"comment\">//读取缓冲区的数据,查看是否将逗号改成了句号</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (heapBuf.isReadable())&#123;</span><br><span class=\"line\">                System.out.print((<span class=\"keyword\">char</span>) heapBuf.readByte());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>输出:</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组第一个字节在缓冲区中的偏移量:<span class=\"number\">0</span></span><br><span class=\"line\">缓冲区中的readerIndex:<span class=\"number\">0</span></span><br><span class=\"line\">writerIndex:<span class=\"number\">13</span></span><br><span class=\"line\">缓冲区中的可读字节数:<span class=\"number\">13</span></span><br><span class=\"line\">Hello,heapBuf</span><br><span class=\"line\">读取数据后的readerIndex:<span class=\"number\">0</span></span><br><span class=\"line\">Hello<span class=\"variable\">.heapBuf</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果<code>hasArray()</code>返回<code>false</code>,尝试访问backing array会报错</p>\n</blockquote>\n<h5 id=\"2-2-2直接缓冲区\"><a href=\"#2-2-2直接缓冲区\" class=\"headerlink\" title=\"2.2.2直接缓冲区\"></a>2.2.2直接缓冲区</h5><p>直接缓冲区存储于<strong>JVM堆外</strong>的内存空间.这样做有一个好处,当你想把JVM中的数据写给socket,需要将数据复制到直接缓冲区(JVM堆外内存)再交给socket.如果使用直接缓冲区,将减少复制这一过程.</p>\n<p>但是直接缓冲区也是有不足的,与JVM堆的缓冲区相比,他们的分配和释放是比较昂贵的.而且还有一个缺点,面对遗留代码的时候,可能不确定ByteBuf使用的是直接缓冲区还是堆缓冲区,你可能需要进行一次额外的复制.如代码示例.</p>\n<p>与自带后备数组的堆缓冲区来讲,这要多做一些工作.所以,如果确定容器中的数据会被作为数组来访问,你可能更愿意使用堆内存.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实际上你不知道从哪获得的引用,这可能是一个直接缓冲区的ByteBuf</span></span><br><span class=\"line\"><span class=\"comment\">//忽略Unpooled.buffer方法,当做不知道从哪获得的directBuf</span></span><br><span class=\"line\">ByteBuf directBuf = Unpooled.buffer(<span class=\"number\">1024</span>); </span><br><span class=\"line\"><span class=\"comment\">//如果想要从数组中访问数据,需要将直接缓冲区中的数据手动复制到数组中</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!directBuf.hasArray()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> length = directBuf.readableBytes();</span><br><span class=\"line\">          <span class=\"keyword\">byte</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[length];</span><br><span class=\"line\">          directBuf.getBytes(directBuf.readerIndex(), array);</span><br><span class=\"line\">          handleArray(array, <span class=\"number\">0</span>, length);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-2-3符合缓冲区-CompositeByteBuf\"><a href=\"#2-2-3符合缓冲区-CompositeByteBuf\" class=\"headerlink\" title=\"2.2.3符合缓冲区(CompositeByteBuf)\"></a>2.2.3符合缓冲区(CompositeByteBuf)</h5><p>聚合缓冲区是个非常好用的东西,是多个ByteBuf的聚合视图,可以添加或删除ByteBuf实例.</p>\n<blockquote>\n<p>CompositeByteBuf中的ByteBuf实例可能同事包含直接内存分配和非直接内存分配.如果其中只有一个实例,那么调用CompositeByteBuf中的<code>hasArray()</code>方法将返回该组件上的<code>hasArray()</code>方法的值,否则返回<code>false</code></p>\n</blockquote>\n<p>多个ByteBuf组成一个完整的消息是很常见的,比如<code>header</code>和<code>body</code>组成的HTTP协议传输的消息.消息中的<code>body</code>有时候可能能重用,我们不想每次都创建重复的<code>body</code>,我们可以通过CompositeByteBuf来复用<code>body</code>.</p>\n<p>对比一下JDK中的<code>ByteBuffer</code>实现复合缓冲区和Netty中的<code>CompositeByteBuf</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//JDK版本实现复合缓冲区</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">byteBufferComposite</span><span class=\"params\">(ByteBuffer header, ByteBuffer body)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用一个数组来保存消息的各个部分</span></span><br><span class=\"line\">        ByteBuffer[] message =  <span class=\"keyword\">new</span> ByteBuffer[]&#123; header, body &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个新的ByteBuffer来复制合并header和body</span></span><br><span class=\"line\">        ByteBuffer message2 =</span><br><span class=\"line\">                ByteBuffer.allocate(header.remaining() + body.remaining());</span><br><span class=\"line\">        message2.put(header);</span><br><span class=\"line\">        message2.put(body);</span><br><span class=\"line\">        message2.flip();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Netty中的CompositeByteBuf</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">byteBufComposite</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CompositeByteBuf messageBuf = Unpooled.compositeBuffer();</span><br><span class=\"line\">        ByteBuf headerBuf = Unpooled.buffer(<span class=\"number\">1024</span>); <span class=\"comment\">// 可能是直接缓存也可能是堆缓存中的</span></span><br><span class=\"line\">        ByteBuf bodyBuf = Unpooled.buffer(<span class=\"number\">1024</span>);   <span class=\"comment\">// 可能是直接缓存也可能是堆缓存中的</span></span><br><span class=\"line\">        messageBuf.addComponents(headerBuf, bodyBuf);</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        messageBuf.removeComponent(<span class=\"number\">0</span>); <span class=\"comment\">// remove the header</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ByteBuf buf : messageBuf) &#123;</span><br><span class=\"line\">            System.out.println(buf.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>CompositeByteBuf</code>不支持访问其后备数组,所以访问<code>CompositeByteBuf</code>中的数据类似于访问直接缓冲区</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompositeByteBuf compBuf = Unpooled.compositeBuffer();</span><br><span class=\"line\"><span class=\"keyword\">int</span> length = compBuf.readableBytes();</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[length];</span><br><span class=\"line\"><span class=\"comment\">//将CompositeByteBuf中的数据复制到数组中</span></span><br><span class=\"line\">compBuf.getBytes(compBuf.readerIndex(), array);</span><br><span class=\"line\"><span class=\"comment\">//处理一下数组中的数据</span></span><br><span class=\"line\">handleArray(array, <span class=\"number\">0</span>, array.length);</span><br></pre></td></tr></table></figure>\n<p>Netty使用<code>CompositeByteBuf</code>来优化socket的IO操作,避免了JDK缓冲区实现所导致的性能和内存使用率的缺陷.内存使用率的缺陷是指对可复用对象大量的复制,Netty对其在内部做了优化,虽然没有暴露出来,但是应该知道CompositeByteBuf的优势和JDK自带工具的弊端.</p>\n<blockquote>\n<p>JDK的NIO包中提供了Scatter/Gather I/O技术,字面意思是打散和聚合,可以理解为把单个ByteBuffer切分成多个或者把多个ByteBuffer合并成一个.</p>\n</blockquote>\n<h3 id=\"3-字节级操作\"><a href=\"#3-字节级操作\" class=\"headerlink\" title=\"3.字节级操作\"></a>3.字节级操作</h3><p>ByteBuf的索引从0开始,最后一个索引是<code>capacity()-1</code>.</p>\n<p>遍历演示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = Unpooled.buffer(<span class=\"number\">1024</span>); </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span> b = buffer.getByte(i);<span class=\"comment\">//这种方法不会移动readerIndex指针</span></span><br><span class=\"line\">    System.out.println((<span class=\"keyword\">char</span>) b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-1readerIndex和writerIndex\"><a href=\"#3-1readerIndex和writerIndex\" class=\"headerlink\" title=\"3.1readerIndex和writerIndex\"></a>3.1readerIndex和writerIndex</h4><p>JDK中的<code>ByteBuffer</code>只有一个索引,需要通过<code>flip()</code>来切换读写操作,Netty中的<code>ByteBuf</code>既有读索引,也有写索引,通过两个索引把ByteBuf划分了三部分.</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/F82D62BF4B9E4AD8BCF6F9F9B63D29E1?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p>可以调用<code>discardReadBytes()</code>方法可丢弃可丢弃字节并回收空间.</p>\n<p>调用<code>discardReadBytes()</code>方法之后</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/E6A068B1C5CB4A949911943A989D9892?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p>使用<code>read*</code>或<code>skip*</code>方法都会增加<code>readerIndex</code>.</p>\n<p>移动<code>readerIndex</code>读取可读数据的方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (buffer.isReadable()) &#123;</span><br><span class=\"line\">    System.out.println(buffer.readByte());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>write*</code>方法写入<code>ByteBuf</code>时会增加writerIndex,如果超过容量会抛出<code>IndexOutOfBoundException</code>.</p>\n<p><code>writeableBytes()</code>可以返回可写字节数.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (buffer.writableBytes() &gt;= <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\tbuffer.writeInt(random.nextInt());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2索引管理\"><a href=\"#3-2索引管理\" class=\"headerlink\" title=\"3.2索引管理\"></a>3.2索引管理</h4><blockquote>\n<p>JDK 的<code>InputStream</code> 定义了 <code>mark(int readlimit)</code>和<code>reset()</code>方法，这些方法分别被用来将流中的当前位置标记为指定的值，以及将流重置到该位置。<br>同样，可以通过调用 <code>markReaderIndex()</code>、<code>markWriterIndex()</code>、 <code>resetWriterIndex()</code>和<code>resetReaderIndex()</code>来标记和重置 <code>ByteBuf</code>的<code>readerIndex</code>和 <code>writerIndex</code>。这些和<code>InputStream</code>上的调用类似，只是没有<code>readlimit</code> 参数来指定标记什么时候失效。 </p>\n</blockquote>\n<p>如果将索引设置到一个无效位置会抛出<code>IndexOutOfBoundsException</code>.</p>\n<p>可以通过<code>clear()</code>归零索引,归零索引不会清除数据.</p>\n<h4 id=\"3-3查找\"><a href=\"#3-3查找\" class=\"headerlink\" title=\"3.3查找\"></a>3.3查找</h4><p>ByteBuf中很多方法可以确定<strong>值</strong>的索引,如<code>indexOf()</code>.</p>\n<p>复杂查找可以通过那些需要一个<code>ByteBufProcessor</code>作为参数的方法完成.这个接口应该可以使用<code>lambda</code>表达式(但是我现在使用的Netty4.1.12已经废弃了该接口,应该使用<code>ByteProcessor</code>).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\"><span class=\"keyword\">int</span> index = buffer.forEachByte(ByteProcessor.FIND_CR);</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-4派生缓冲区\"><a href=\"#3-4派生缓冲区\" class=\"headerlink\" title=\"3.4派生缓冲区\"></a>3.4派生缓冲区</h4><p>派生缓冲区就是,基于原缓冲区一顿操作生成新缓冲区.比如复制,切分等等.</p>\n<p><code>duplicate()</code>；<code>slice()</code>； <code>slice(int, int)</code>;<code>Unpooled.unmodifiableBuffer(…)</code>;<code>order(ByteOrder)</code>； <code>readSlice(int)</code>.</p>\n<blockquote>\n<p>每个这些方法都将返回一个新的 ByteBuf 实例，它具有自己的读索引、写索引和标记<br>索引。 其内部存储和 JDK 的 ByteBuffer 一样也是共享的。这使得派生缓冲区的创建成本<br>是很低廉的，但是这也意味着，如果你修改了它的内容，也同时修改了其对应的源实例，所<br>以要小心 </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//复制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">byteBufCopy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Charset utf8 = Charset.forName(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        ByteBuf buf = Unpooled.copiedBuffer(<span class=\"string\">\"Netty in Action rocks!\"</span>, utf8);</span><br><span class=\"line\">        ByteBuf copy = buf.copy(<span class=\"number\">0</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">        System.out.println(copy.toString(utf8));</span><br><span class=\"line\">        buf.setByte(<span class=\"number\">0</span>, (<span class=\"keyword\">byte</span>)<span class=\"string\">'J'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> buf.getByte(<span class=\"number\">0</span>) != copy.getByte(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//切片</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">byteBufSlice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Charset utf8 = Charset.forName(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        ByteBuf buf = Unpooled.copiedBuffer(<span class=\"string\">\"Netty in Action rocks!\"</span>, utf8);</span><br><span class=\"line\">        ByteBuf sliced = buf.slice(<span class=\"number\">0</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">        System.out.println(sliced.toString(utf8));</span><br><span class=\"line\">        buf.setByte(<span class=\"number\">0</span>, (<span class=\"keyword\">byte</span>)<span class=\"string\">'J'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> buf.getByte(<span class=\"number\">0</span>) == sliced.getByte(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>还有一些读写操作的API,留在文末展示吧.</p>\n<h3 id=\"4-ByteBufHolder接口\"><a href=\"#4-ByteBufHolder接口\" class=\"headerlink\" title=\"4.ByteBufHolder接口\"></a>4.ByteBufHolder接口</h3><blockquote>\n<p>我们经常发现， 除了实际的数据负载之外， 我们还需要存储各种属性值。 HTTP 响应便是一个很好的例子， 除了表示为字节的内容，还包括状态码、 cookie 等。<br>为了处理这种常见的用例， Netty 提供了 ByteBufHolder。 ByteBufHolder 也为 Netty 的高级特性提供了支持，如缓冲区池化，其中可以从池中借用 ByteBuf， 并且在需要时自动释放。ByteBufHolder 只有几种用于访问底层数据和引用计数的方法。 </p>\n</blockquote>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/B261AE020F7B48D386C6E6F20E33AD75?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<h3 id=\"5-ByteBuf的分配\"><a href=\"#5-ByteBuf的分配\" class=\"headerlink\" title=\"5.ByteBuf的分配\"></a>5.ByteBuf的分配</h3><p>我们可以通过<code>ByteBufAllocator</code>来分配一个<code>ByteBuf</code>实例.<code>ByteBufAllocator</code>接口实现了ByteBuf的池化.</p>\n<p>可以通过 <code>Channel</code>（每个都可以有一个不同的 <code>ByteBufAllocator</code>实例）或者绑定到<code>ChannelHandler</code> 的 <code>ChannelHandlerContext</code>获取一个到<code>ByteBufAllocator</code>的引用。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从Channel获取一个ByteBufAllocator的引用</span></span><br><span class=\"line\">Channel channel = ...;</span><br><span class=\"line\">ByteBufAllocator allocator = channel.alloc();</span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"comment\">//从ChannelHandlerContext获取ByteBufAllocator 的引用</span></span><br><span class=\"line\">ChannelHandlerContext ctx = ...;</span><br><span class=\"line\">ByteBufAllocator allocator2 = ctx.alloc();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Netty提供了两种ByteBufAllocator的实现： PooledByteBufAllocator和Unpooled\u0002ByteBufAllocator。前者池化了ByteBuf的实例以提高性能并最大限度地减少内存碎片。 后者的实现不 池化ByteBuf实例， 并且在每次它被调用时都会返回一个新的实例。 </p>\n</blockquote>\n<p>默认使用的是<code>PooledByteBufAllocator</code>,可以通过<code>ChannelConfig</code>修改.</p>\n<p><strong>Unpooled缓冲区</strong></p>\n<p>可能有时候拿不到<code>ByteBufAllocator</code>引用的话,可以使用Unpooled工具类来创建未持化<code>ByteBuf</code>实例.</p>\n<p><strong>ByteBufUtil类</strong></p>\n<blockquote>\n<p>ByteBufUtil 提供了用于操作 ByteBuf 的静态的辅助方法。因为这个 API 是通用的， 并且和池化无关，所以这些方法已然在分配类的外部实现。<br>这些静态方法中最有价值的可能就是 hexdump()方法， 它以十六进制的表示形式打印ByteBuf 的内容。这在各种情况下都很有用，例如， 出于调试的目的记录 ByteBuf 的内容。十六进制的表示通常会提供一个比字节值的直接表示形式更加有用的日志条目，此外，十六进制的版本还可以很容易地转换回实际的字节表示。<br>另一个有用的方法是 boolean equals(ByteBuf, ByteBuf)， 它被用来判断两个 ByteBuf实例的相等性。如果你实现自己的 ByteBuf 子类，你可能会发现 ByteBufUtil 的其他有用方法。 </p>\n</blockquote>\n<h4 id=\"6-引用计数\"><a href=\"#6-引用计数\" class=\"headerlink\" title=\"6.引用计数\"></a>6.引用计数</h4><blockquote>\n<p>引用计数是一种通过在某个对象所持有的资源不再被其他对象引用时释放该对象所持有的资源来优化内存使用和性能的技术。 它们都实现了 interface ReferenceCounted。 引用计数背后的想法并不是特别的复杂；它主要涉及跟踪到某个特定对象的活动引用的数量。一个 ReferenceCounted 实现的实例将通常以活动的引用计数为 1 作为开始。只要引用计数大于 0， 就能保证对象不会被释放。当活动引用的数量减少到 0 时，该实例就会被释放。注意，虽然释放的确切语义可能是特定于实现的，但是至少已经释放的对象应该不可再用了。 </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从Channel获取ByteBufAllocator</span></span><br><span class=\"line\">Channel channel = ...;</span><br><span class=\"line\">ByteBufAllocator allocator = channel.alloc();</span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"comment\">//从ByteBufAllocator分配一个ByteBuf</span></span><br><span class=\"line\">ByteBuf buffer = allocator.directBuffer();</span><br><span class=\"line\"><span class=\"keyword\">assert</span> buffer.refCnt() == <span class=\"number\">1</span>;<span class=\"comment\">//引用计数是否为1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-API\"><a href=\"#7-API\" class=\"headerlink\" title=\"7.API\"></a>7.API</h3><h4 id=\"ByteBuf\"><a href=\"#ByteBuf\" class=\"headerlink\" title=\"ByteBuf\"></a>ByteBuf</h4><p><img src=\"https://note.youdao.com/yws/api/personal/file/CF647FAEE0C642CABCFC1329454F9A3C?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/FD2B630F7AFF4B8C85E86467EFE53765?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/64A587980C8748B5AFA674BCF223D953?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/44DF026ABA3545C5AC63D096043BF880?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/7762FDB1C0854B519C65B6DD9C1B53E7?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<h4 id=\"ByteBufAllocator\"><a href=\"#ByteBufAllocator\" class=\"headerlink\" title=\"ByteBufAllocator\"></a>ByteBufAllocator</h4><p><img src=\"https://note.youdao.com/yws/api/personal/file/758F1B1A5A6F4D238012C7F79A0B7BC6?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<h4 id=\"Unpooled\"><a href=\"#Unpooled\" class=\"headerlink\" title=\"Unpooled\"></a>Unpooled</h4><p><img src=\"https://note.youdao.com/yws/api/personal/file/F05DD429F5E144C5B3175CF96E572539?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Netty之ByteBuf\"><a href=\"#Netty之ByteBuf\" class=\"headerlink\" title=\"Netty之ByteBuf\"></a>Netty之ByteBuf</h2><p>本文内容主要参考<strong>Netty In Action</strong>,偏笔记向.</p>\n<p>网络编程中,字节缓冲区是一个比较基本的组件.Java NIO提供了<code>ByteBuffer</code>,但是使用过的都知道<code>ByteBuffer</code>对于读写数据操作还是有些麻烦的,切换读写状态需要<code>flip()</code>.<strong>Netty</strong>框架对字节缓冲区进行了封装,名称是<code>ByteBuf</code>,相较于<code>ByteBuffer</code>更灵活.</p>","more":"<h3 id=\"1-ByteBuf特点概览\"><a href=\"#1-ByteBuf特点概览\" class=\"headerlink\" title=\"1.ByteBuf特点概览\"></a>1.ByteBuf特点概览</h3><ul>\n<li>用户可以自定义缓冲区类型对其扩展</li>\n<li>通过内置的符合缓冲区类型实现了透明的零拷贝</li>\n<li>容量可以按需增长(类似<code>StringBuilder</code>)</li>\n<li>切换读写模式不用调用<code>flip()</code>方法</li>\n<li>读写使用各自的索引</li>\n<li>支持方法的链式调用</li>\n<li>支持引用计数</li>\n<li>支持池化</li>\n</ul>\n<h3 id=\"2-ByteBuf类介绍\"><a href=\"#2-ByteBuf类介绍\" class=\"headerlink\" title=\"2.ByteBuf类介绍\"></a>2.ByteBuf类介绍</h3><h4 id=\"2-1工作模式\"><a href=\"#2-1工作模式\" class=\"headerlink\" title=\"2.1工作模式\"></a>2.1工作模式</h4><p><code>ByteBuf</code>维护了两个指针,一个用于读取(<code>readerIndex</code>),一个用于写入(<code>writerIndex</code>).</p>\n<p>使用<strong>ByteBuf的API</strong>中的<code>read*</code>方法读取数据时,<code>readerIndex</code>会根据读取字节数向后移动,但是<code>get*</code>方法不会移动<code>readerIndex</code>;使用<code>write*</code>数据时,<code>writerIndex</code>会根据字节数移动,但是<code>set*</code>方法不会移动<code>writerIndex</code>.(<code>read*</code>表示<code>read</code>开头的方法,其余意义相同)</p>\n<p>读取数据时,如果<code>readerIndex</code>超过了<code>writerIndex</code>会触发<code>IndexOutOfBoundsException</code>.</p>\n<p>可以指定<code>ByteBuf</code>容量最大值,<code>capacity(int)</code>或<code>ensureWritable(int)</code>,当超出容量时会抛出异常.</p>\n<h4 id=\"2-2使用模式\"><a href=\"#2-2使用模式\" class=\"headerlink\" title=\"2.2使用模式\"></a>2.2使用模式</h4><h5 id=\"2-2-1堆缓冲区\"><a href=\"#2-2-1堆缓冲区\" class=\"headerlink\" title=\"2.2.1堆缓冲区\"></a>2.2.1堆缓冲区</h5><p>将<code>ByteBuf</code>存入<strong>JVM</strong>的堆空间.能够在没有池化的情况下提供快速的分配和释放.</p>\n<p>除此之外,ByteBuf的堆缓冲区还提供了一个后备数组(backing array).后备数组和ByteBuf中的数据是对应的,如果修改了<code>backing array</code>中的数据,<code>ByteBuf</code>中的数据是同步的.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ByteBuf heapBuf = Unpooled.buffer(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(heapBuf.hasArray())&#123;</span><br><span class=\"line\">            heapBuf.writeBytes(<span class=\"string\">\"Hello,heapBuf\"</span>.getBytes());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"数组第一个字节在缓冲区中的偏移量:\"</span>+heapBuf.arrayOffset());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"缓冲区中的readerIndex:\"</span>+heapBuf.readerIndex());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"writerIndex:\"</span>+heapBuf.writerIndex());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"缓冲区中的可读字节数:\"</span>+heapBuf.readableBytes());<span class=\"comment\">//等于writerIndex-readerIndex</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] array = heapBuf.array();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; heapBuf.readableBytes();i++)&#123;</span><br><span class=\"line\">                System.out.print((<span class=\"keyword\">char</span>) array[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">                    array[i] = (<span class=\"keyword\">int</span>)<span class=\"string\">'.'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//不会修改readerIndex位置</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"\\n读取数据后的readerIndex:\"</span>+heapBuf.readerIndex());</span><br><span class=\"line\">            <span class=\"comment\">//读取缓冲区的数据,查看是否将逗号改成了句号</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (heapBuf.isReadable())&#123;</span><br><span class=\"line\">                System.out.print((<span class=\"keyword\">char</span>) heapBuf.readByte());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>输出:</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组第一个字节在缓冲区中的偏移量:<span class=\"number\">0</span></span><br><span class=\"line\">缓冲区中的readerIndex:<span class=\"number\">0</span></span><br><span class=\"line\">writerIndex:<span class=\"number\">13</span></span><br><span class=\"line\">缓冲区中的可读字节数:<span class=\"number\">13</span></span><br><span class=\"line\">Hello,heapBuf</span><br><span class=\"line\">读取数据后的readerIndex:<span class=\"number\">0</span></span><br><span class=\"line\">Hello<span class=\"variable\">.heapBuf</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果<code>hasArray()</code>返回<code>false</code>,尝试访问backing array会报错</p>\n</blockquote>\n<h5 id=\"2-2-2直接缓冲区\"><a href=\"#2-2-2直接缓冲区\" class=\"headerlink\" title=\"2.2.2直接缓冲区\"></a>2.2.2直接缓冲区</h5><p>直接缓冲区存储于<strong>JVM堆外</strong>的内存空间.这样做有一个好处,当你想把JVM中的数据写给socket,需要将数据复制到直接缓冲区(JVM堆外内存)再交给socket.如果使用直接缓冲区,将减少复制这一过程.</p>\n<p>但是直接缓冲区也是有不足的,与JVM堆的缓冲区相比,他们的分配和释放是比较昂贵的.而且还有一个缺点,面对遗留代码的时候,可能不确定ByteBuf使用的是直接缓冲区还是堆缓冲区,你可能需要进行一次额外的复制.如代码示例.</p>\n<p>与自带后备数组的堆缓冲区来讲,这要多做一些工作.所以,如果确定容器中的数据会被作为数组来访问,你可能更愿意使用堆内存.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实际上你不知道从哪获得的引用,这可能是一个直接缓冲区的ByteBuf</span></span><br><span class=\"line\"><span class=\"comment\">//忽略Unpooled.buffer方法,当做不知道从哪获得的directBuf</span></span><br><span class=\"line\">ByteBuf directBuf = Unpooled.buffer(<span class=\"number\">1024</span>); </span><br><span class=\"line\"><span class=\"comment\">//如果想要从数组中访问数据,需要将直接缓冲区中的数据手动复制到数组中</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!directBuf.hasArray()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> length = directBuf.readableBytes();</span><br><span class=\"line\">          <span class=\"keyword\">byte</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[length];</span><br><span class=\"line\">          directBuf.getBytes(directBuf.readerIndex(), array);</span><br><span class=\"line\">          handleArray(array, <span class=\"number\">0</span>, length);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-2-3符合缓冲区-CompositeByteBuf\"><a href=\"#2-2-3符合缓冲区-CompositeByteBuf\" class=\"headerlink\" title=\"2.2.3符合缓冲区(CompositeByteBuf)\"></a>2.2.3符合缓冲区(CompositeByteBuf)</h5><p>聚合缓冲区是个非常好用的东西,是多个ByteBuf的聚合视图,可以添加或删除ByteBuf实例.</p>\n<blockquote>\n<p>CompositeByteBuf中的ByteBuf实例可能同事包含直接内存分配和非直接内存分配.如果其中只有一个实例,那么调用CompositeByteBuf中的<code>hasArray()</code>方法将返回该组件上的<code>hasArray()</code>方法的值,否则返回<code>false</code></p>\n</blockquote>\n<p>多个ByteBuf组成一个完整的消息是很常见的,比如<code>header</code>和<code>body</code>组成的HTTP协议传输的消息.消息中的<code>body</code>有时候可能能重用,我们不想每次都创建重复的<code>body</code>,我们可以通过CompositeByteBuf来复用<code>body</code>.</p>\n<p>对比一下JDK中的<code>ByteBuffer</code>实现复合缓冲区和Netty中的<code>CompositeByteBuf</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//JDK版本实现复合缓冲区</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">byteBufferComposite</span><span class=\"params\">(ByteBuffer header, ByteBuffer body)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用一个数组来保存消息的各个部分</span></span><br><span class=\"line\">        ByteBuffer[] message =  <span class=\"keyword\">new</span> ByteBuffer[]&#123; header, body &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个新的ByteBuffer来复制合并header和body</span></span><br><span class=\"line\">        ByteBuffer message2 =</span><br><span class=\"line\">                ByteBuffer.allocate(header.remaining() + body.remaining());</span><br><span class=\"line\">        message2.put(header);</span><br><span class=\"line\">        message2.put(body);</span><br><span class=\"line\">        message2.flip();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Netty中的CompositeByteBuf</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">byteBufComposite</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CompositeByteBuf messageBuf = Unpooled.compositeBuffer();</span><br><span class=\"line\">        ByteBuf headerBuf = Unpooled.buffer(<span class=\"number\">1024</span>); <span class=\"comment\">// 可能是直接缓存也可能是堆缓存中的</span></span><br><span class=\"line\">        ByteBuf bodyBuf = Unpooled.buffer(<span class=\"number\">1024</span>);   <span class=\"comment\">// 可能是直接缓存也可能是堆缓存中的</span></span><br><span class=\"line\">        messageBuf.addComponents(headerBuf, bodyBuf);</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        messageBuf.removeComponent(<span class=\"number\">0</span>); <span class=\"comment\">// remove the header</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ByteBuf buf : messageBuf) &#123;</span><br><span class=\"line\">            System.out.println(buf.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>CompositeByteBuf</code>不支持访问其后备数组,所以访问<code>CompositeByteBuf</code>中的数据类似于访问直接缓冲区</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompositeByteBuf compBuf = Unpooled.compositeBuffer();</span><br><span class=\"line\"><span class=\"keyword\">int</span> length = compBuf.readableBytes();</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[length];</span><br><span class=\"line\"><span class=\"comment\">//将CompositeByteBuf中的数据复制到数组中</span></span><br><span class=\"line\">compBuf.getBytes(compBuf.readerIndex(), array);</span><br><span class=\"line\"><span class=\"comment\">//处理一下数组中的数据</span></span><br><span class=\"line\">handleArray(array, <span class=\"number\">0</span>, array.length);</span><br></pre></td></tr></table></figure>\n<p>Netty使用<code>CompositeByteBuf</code>来优化socket的IO操作,避免了JDK缓冲区实现所导致的性能和内存使用率的缺陷.内存使用率的缺陷是指对可复用对象大量的复制,Netty对其在内部做了优化,虽然没有暴露出来,但是应该知道CompositeByteBuf的优势和JDK自带工具的弊端.</p>\n<blockquote>\n<p>JDK的NIO包中提供了Scatter/Gather I/O技术,字面意思是打散和聚合,可以理解为把单个ByteBuffer切分成多个或者把多个ByteBuffer合并成一个.</p>\n</blockquote>\n<h3 id=\"3-字节级操作\"><a href=\"#3-字节级操作\" class=\"headerlink\" title=\"3.字节级操作\"></a>3.字节级操作</h3><p>ByteBuf的索引从0开始,最后一个索引是<code>capacity()-1</code>.</p>\n<p>遍历演示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = Unpooled.buffer(<span class=\"number\">1024</span>); </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span> b = buffer.getByte(i);<span class=\"comment\">//这种方法不会移动readerIndex指针</span></span><br><span class=\"line\">    System.out.println((<span class=\"keyword\">char</span>) b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-1readerIndex和writerIndex\"><a href=\"#3-1readerIndex和writerIndex\" class=\"headerlink\" title=\"3.1readerIndex和writerIndex\"></a>3.1readerIndex和writerIndex</h4><p>JDK中的<code>ByteBuffer</code>只有一个索引,需要通过<code>flip()</code>来切换读写操作,Netty中的<code>ByteBuf</code>既有读索引,也有写索引,通过两个索引把ByteBuf划分了三部分.</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/F82D62BF4B9E4AD8BCF6F9F9B63D29E1?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p>可以调用<code>discardReadBytes()</code>方法可丢弃可丢弃字节并回收空间.</p>\n<p>调用<code>discardReadBytes()</code>方法之后</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/E6A068B1C5CB4A949911943A989D9892?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p>使用<code>read*</code>或<code>skip*</code>方法都会增加<code>readerIndex</code>.</p>\n<p>移动<code>readerIndex</code>读取可读数据的方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (buffer.isReadable()) &#123;</span><br><span class=\"line\">    System.out.println(buffer.readByte());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>write*</code>方法写入<code>ByteBuf</code>时会增加writerIndex,如果超过容量会抛出<code>IndexOutOfBoundException</code>.</p>\n<p><code>writeableBytes()</code>可以返回可写字节数.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (buffer.writableBytes() &gt;= <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\tbuffer.writeInt(random.nextInt());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2索引管理\"><a href=\"#3-2索引管理\" class=\"headerlink\" title=\"3.2索引管理\"></a>3.2索引管理</h4><blockquote>\n<p>JDK 的<code>InputStream</code> 定义了 <code>mark(int readlimit)</code>和<code>reset()</code>方法，这些方法分别被用来将流中的当前位置标记为指定的值，以及将流重置到该位置。<br>同样，可以通过调用 <code>markReaderIndex()</code>、<code>markWriterIndex()</code>、 <code>resetWriterIndex()</code>和<code>resetReaderIndex()</code>来标记和重置 <code>ByteBuf</code>的<code>readerIndex</code>和 <code>writerIndex</code>。这些和<code>InputStream</code>上的调用类似，只是没有<code>readlimit</code> 参数来指定标记什么时候失效。 </p>\n</blockquote>\n<p>如果将索引设置到一个无效位置会抛出<code>IndexOutOfBoundsException</code>.</p>\n<p>可以通过<code>clear()</code>归零索引,归零索引不会清除数据.</p>\n<h4 id=\"3-3查找\"><a href=\"#3-3查找\" class=\"headerlink\" title=\"3.3查找\"></a>3.3查找</h4><p>ByteBuf中很多方法可以确定<strong>值</strong>的索引,如<code>indexOf()</code>.</p>\n<p>复杂查找可以通过那些需要一个<code>ByteBufProcessor</code>作为参数的方法完成.这个接口应该可以使用<code>lambda</code>表达式(但是我现在使用的Netty4.1.12已经废弃了该接口,应该使用<code>ByteProcessor</code>).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\"><span class=\"keyword\">int</span> index = buffer.forEachByte(ByteProcessor.FIND_CR);</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-4派生缓冲区\"><a href=\"#3-4派生缓冲区\" class=\"headerlink\" title=\"3.4派生缓冲区\"></a>3.4派生缓冲区</h4><p>派生缓冲区就是,基于原缓冲区一顿操作生成新缓冲区.比如复制,切分等等.</p>\n<p><code>duplicate()</code>；<code>slice()</code>； <code>slice(int, int)</code>;<code>Unpooled.unmodifiableBuffer(…)</code>;<code>order(ByteOrder)</code>； <code>readSlice(int)</code>.</p>\n<blockquote>\n<p>每个这些方法都将返回一个新的 ByteBuf 实例，它具有自己的读索引、写索引和标记<br>索引。 其内部存储和 JDK 的 ByteBuffer 一样也是共享的。这使得派生缓冲区的创建成本<br>是很低廉的，但是这也意味着，如果你修改了它的内容，也同时修改了其对应的源实例，所<br>以要小心 </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//复制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">byteBufCopy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Charset utf8 = Charset.forName(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        ByteBuf buf = Unpooled.copiedBuffer(<span class=\"string\">\"Netty in Action rocks!\"</span>, utf8);</span><br><span class=\"line\">        ByteBuf copy = buf.copy(<span class=\"number\">0</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">        System.out.println(copy.toString(utf8));</span><br><span class=\"line\">        buf.setByte(<span class=\"number\">0</span>, (<span class=\"keyword\">byte</span>)<span class=\"string\">'J'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> buf.getByte(<span class=\"number\">0</span>) != copy.getByte(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//切片</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">byteBufSlice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Charset utf8 = Charset.forName(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        ByteBuf buf = Unpooled.copiedBuffer(<span class=\"string\">\"Netty in Action rocks!\"</span>, utf8);</span><br><span class=\"line\">        ByteBuf sliced = buf.slice(<span class=\"number\">0</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">        System.out.println(sliced.toString(utf8));</span><br><span class=\"line\">        buf.setByte(<span class=\"number\">0</span>, (<span class=\"keyword\">byte</span>)<span class=\"string\">'J'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> buf.getByte(<span class=\"number\">0</span>) == sliced.getByte(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>还有一些读写操作的API,留在文末展示吧.</p>\n<h3 id=\"4-ByteBufHolder接口\"><a href=\"#4-ByteBufHolder接口\" class=\"headerlink\" title=\"4.ByteBufHolder接口\"></a>4.ByteBufHolder接口</h3><blockquote>\n<p>我们经常发现， 除了实际的数据负载之外， 我们还需要存储各种属性值。 HTTP 响应便是一个很好的例子， 除了表示为字节的内容，还包括状态码、 cookie 等。<br>为了处理这种常见的用例， Netty 提供了 ByteBufHolder。 ByteBufHolder 也为 Netty 的高级特性提供了支持，如缓冲区池化，其中可以从池中借用 ByteBuf， 并且在需要时自动释放。ByteBufHolder 只有几种用于访问底层数据和引用计数的方法。 </p>\n</blockquote>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/B261AE020F7B48D386C6E6F20E33AD75?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<h3 id=\"5-ByteBuf的分配\"><a href=\"#5-ByteBuf的分配\" class=\"headerlink\" title=\"5.ByteBuf的分配\"></a>5.ByteBuf的分配</h3><p>我们可以通过<code>ByteBufAllocator</code>来分配一个<code>ByteBuf</code>实例.<code>ByteBufAllocator</code>接口实现了ByteBuf的池化.</p>\n<p>可以通过 <code>Channel</code>（每个都可以有一个不同的 <code>ByteBufAllocator</code>实例）或者绑定到<code>ChannelHandler</code> 的 <code>ChannelHandlerContext</code>获取一个到<code>ByteBufAllocator</code>的引用。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从Channel获取一个ByteBufAllocator的引用</span></span><br><span class=\"line\">Channel channel = ...;</span><br><span class=\"line\">ByteBufAllocator allocator = channel.alloc();</span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"comment\">//从ChannelHandlerContext获取ByteBufAllocator 的引用</span></span><br><span class=\"line\">ChannelHandlerContext ctx = ...;</span><br><span class=\"line\">ByteBufAllocator allocator2 = ctx.alloc();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Netty提供了两种ByteBufAllocator的实现： PooledByteBufAllocator和Unpooled\u0002ByteBufAllocator。前者池化了ByteBuf的实例以提高性能并最大限度地减少内存碎片。 后者的实现不 池化ByteBuf实例， 并且在每次它被调用时都会返回一个新的实例。 </p>\n</blockquote>\n<p>默认使用的是<code>PooledByteBufAllocator</code>,可以通过<code>ChannelConfig</code>修改.</p>\n<p><strong>Unpooled缓冲区</strong></p>\n<p>可能有时候拿不到<code>ByteBufAllocator</code>引用的话,可以使用Unpooled工具类来创建未持化<code>ByteBuf</code>实例.</p>\n<p><strong>ByteBufUtil类</strong></p>\n<blockquote>\n<p>ByteBufUtil 提供了用于操作 ByteBuf 的静态的辅助方法。因为这个 API 是通用的， 并且和池化无关，所以这些方法已然在分配类的外部实现。<br>这些静态方法中最有价值的可能就是 hexdump()方法， 它以十六进制的表示形式打印ByteBuf 的内容。这在各种情况下都很有用，例如， 出于调试的目的记录 ByteBuf 的内容。十六进制的表示通常会提供一个比字节值的直接表示形式更加有用的日志条目，此外，十六进制的版本还可以很容易地转换回实际的字节表示。<br>另一个有用的方法是 boolean equals(ByteBuf, ByteBuf)， 它被用来判断两个 ByteBuf实例的相等性。如果你实现自己的 ByteBuf 子类，你可能会发现 ByteBufUtil 的其他有用方法。 </p>\n</blockquote>\n<h4 id=\"6-引用计数\"><a href=\"#6-引用计数\" class=\"headerlink\" title=\"6.引用计数\"></a>6.引用计数</h4><blockquote>\n<p>引用计数是一种通过在某个对象所持有的资源不再被其他对象引用时释放该对象所持有的资源来优化内存使用和性能的技术。 它们都实现了 interface ReferenceCounted。 引用计数背后的想法并不是特别的复杂；它主要涉及跟踪到某个特定对象的活动引用的数量。一个 ReferenceCounted 实现的实例将通常以活动的引用计数为 1 作为开始。只要引用计数大于 0， 就能保证对象不会被释放。当活动引用的数量减少到 0 时，该实例就会被释放。注意，虽然释放的确切语义可能是特定于实现的，但是至少已经释放的对象应该不可再用了。 </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从Channel获取ByteBufAllocator</span></span><br><span class=\"line\">Channel channel = ...;</span><br><span class=\"line\">ByteBufAllocator allocator = channel.alloc();</span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"comment\">//从ByteBufAllocator分配一个ByteBuf</span></span><br><span class=\"line\">ByteBuf buffer = allocator.directBuffer();</span><br><span class=\"line\"><span class=\"keyword\">assert</span> buffer.refCnt() == <span class=\"number\">1</span>;<span class=\"comment\">//引用计数是否为1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-API\"><a href=\"#7-API\" class=\"headerlink\" title=\"7.API\"></a>7.API</h3><h4 id=\"ByteBuf\"><a href=\"#ByteBuf\" class=\"headerlink\" title=\"ByteBuf\"></a>ByteBuf</h4><p><img src=\"https://note.youdao.com/yws/api/personal/file/CF647FAEE0C642CABCFC1329454F9A3C?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/FD2B630F7AFF4B8C85E86467EFE53765?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/64A587980C8748B5AFA674BCF223D953?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/44DF026ABA3545C5AC63D096043BF880?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/7762FDB1C0854B519C65B6DD9C1B53E7?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<h4 id=\"ByteBufAllocator\"><a href=\"#ByteBufAllocator\" class=\"headerlink\" title=\"ByteBufAllocator\"></a>ByteBufAllocator</h4><p><img src=\"https://note.youdao.com/yws/api/personal/file/758F1B1A5A6F4D238012C7F79A0B7BC6?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>\n<h4 id=\"Unpooled\"><a href=\"#Unpooled\" class=\"headerlink\" title=\"Unpooled\"></a>Unpooled</h4><p><img src=\"https://note.youdao.com/yws/api/personal/file/F05DD429F5E144C5B3175CF96E572539?method=download&amp;shareKey=952006455eadac7758f7ae04b1d59c7f\" alt></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjum32yfb000270uy671lvwej","category_id":"cjum5mgj50000q8uyn929dzdi","_id":"cjum5q40l0002r4uygcpmi0jl"},{"post_id":"cjum32yfb000270uy671lvwej","category_id":"cjum5mgjh0003q8uyq8uhgagp","_id":"cjum5q40m0003r4uyumvfui68"}],"PostTag":[{"post_id":"cjum32yfb000270uy671lvwej","tag_id":"cjum32yfu000470uy16jpe13k","_id":"cjum5q40i0000r4uynobuo6k6"},{"post_id":"cjum32yfb000270uy671lvwej","tag_id":"cjum32yfv000570uyjkx8nqqp","_id":"cjum5q40k0001r4uyh6b2hil1"}],"Tag":[{"name":"Netty","_id":"cjum32yfu000470uy16jpe13k"},{"name":"Netty in action","_id":"cjum32yfv000570uyjkx8nqqp"}]}}